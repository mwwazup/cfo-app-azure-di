/*
  # Create comprehensive KPI records table
  
  Creates a table for tracking detailed KPI metrics with:
  - kpi_name: Name of the KPI being tracked
  - kpi_value: Current value (stored as decimal for flexibility)
  - goal_value: Target/goal value for this KPI
  - trend_vs_last_month: Percentage change from previous month
  - status: Performance status (good, warning, alert)
  - period: Time period for this KPI record
  - plain_explanation: Human-readable explanation of the KPI
  - action_suggestion: Recommended actions based on KPI performance
  - Additional metadata fields for tracking and organization
*/

CREATE TABLE IF NOT EXISTS kpi_records (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  kpi_name varchar(100) NOT NULL,
  kpi_value decimal(15,4) NOT NULL,
  goal_value decimal(15,4),
  trend_vs_last_month decimal(8,4), -- Percentage change (e.g., 0.15 = 15%)
  status varchar(20) NOT NULL CHECK (status IN ('good', 'warning', 'alert')),
  period date NOT NULL, -- Date representing the period (e.g., first day of month)
  plain_explanation text,
  action_suggestion text,
  kpi_category varchar(50), -- Optional: group KPIs by category (revenue, growth, efficiency, etc.)
  display_format varchar(20) DEFAULT 'number', -- Format hint: number, percentage, currency, etc.
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL,
  
  -- Ensure one record per user/kpi/period combination
  UNIQUE(user_id, kpi_name, period)
);

-- Enable Row Level Security
ALTER TABLE kpi_records ENABLE ROW LEVEL SECURITY;

-- Create policies for user data access
CREATE POLICY "Users can view their own KPI records"
  ON kpi_records
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own KPI records"
  ON kpi_records
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own KPI records"
  ON kpi_records
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own KPI records"
  ON kpi_records
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS kpi_records_user_id_idx ON kpi_records(user_id);
CREATE INDEX IF NOT EXISTS kpi_records_period_idx ON kpi_records(period);
CREATE INDEX IF NOT EXISTS kpi_records_user_period_idx ON kpi_records(user_id, period);
CREATE INDEX IF NOT EXISTS kpi_records_user_kpi_idx ON kpi_records(user_id, kpi_name);
CREATE INDEX IF NOT EXISTS kpi_records_status_idx ON kpi_records(status);
CREATE INDEX IF NOT EXISTS kpi_records_category_idx ON kpi_records(kpi_category);

-- Create updated_at trigger
CREATE TRIGGER update_kpi_records_updated_at
  BEFORE UPDATE ON kpi_records
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample KPI records for demonstration
-- (These would typically be generated by your application logic)
INSERT INTO kpi_records (
  user_id, kpi_name, kpi_value, goal_value, trend_vs_last_month, 
  status, period, plain_explanation, action_suggestion, kpi_category, display_format
) VALUES
-- Revenue KPIs
(
  (SELECT id FROM auth.users LIMIT 1), -- Use first available user for demo
  'Monthly Revenue',
  45000.00,
  50000.00,
  0.08, -- 8% increase
  'warning',
  date_trunc('month', CURRENT_DATE),
  'Revenue is 90% of target but showing positive growth trend',
  'Focus on closing pending deals and increasing average transaction value',
  'revenue',
  'currency'
),
(
  (SELECT id FROM auth.users LIMIT 1),
  'Revenue Growth Rate',
  0.08,
  0.15,
  0.02, -- 2% improvement
  'warning', 
  date_trunc('month', CURRENT_DATE),
  'Growth rate is improving but still below target of 15%',
  'Implement new customer acquisition strategies and improve retention',
  'growth',
  'percentage'
),
(
  (SELECT id FROM auth.users LIMIT 1),
  'Customer Acquisition Cost',
  250.00,
  200.00,
  -0.05, -- 5% reduction (good for CAC)
  'alert',
  date_trunc('month', CURRENT_DATE),
  'CAC is 25% higher than target, impacting profitability',
  'Optimize marketing channels and improve conversion rates',
  'efficiency',
  'currency'
),
(
  (SELECT id FROM auth.users LIMIT 1),
  'Profit Margin',
  0.32,
  0.35,
  0.01, -- 1% improvement
  'good',
  date_trunc('month', CURRENT_DATE),
  'Profit margin is close to target and trending upward',
  'Continue current cost management strategies',
  'profitability',
  'percentage'
)
ON CONFLICT (user_id, kpi_name, period) DO NOTHING;
